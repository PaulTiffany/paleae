{
  "meta": {
    "tool": "paleae",
    "version": "1.2.0",
    "license": "MIT",
    "website": "https://paleae.com",
    "source": "https://github.com/PaulTiffany/paleae",
    "timestamp": "2025-09-17T00:29:12Z",
    "root_directory": "C:\\Users\\paulc\\projects\\paleae",
    "ignore_file": {
      "file": ".paleaeignore",
      "present": true,
      "patterns": 11,
      "negations": 1
    },
    "summary": {
      "total_files": 24,
      "total_chars": 87585,
      "estimated_tokens": 21888
    }
  },
  "files": [
    {
      "path": ".github/workflows/ci.yml",
      "content": "name: Python CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v4\n\n    - name: Set up Python 3.11\n      uses: actions/setup-python@v5\n      with:\n        python-version: '3.11'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -e .[dev]\n\n    - name: Lint with ruff\n      run: |\n        ruff check .\n\n    - name: Type check with mypy\n      run: |\n        mypy .\n\n    - name: Check docstrings with pydocstyle\n      run: |\n        pydocstyle paleae.py\n\n    - name: Test with pytest\n      run: |\n        pytest\n",
      "size_chars": 680,
      "sha256": "e596cab9963241443be0841339bb68e766b71c7b824fef230c0b0902e658b5d9",
      "estimated_tokens": 170
    },
    {
      "path": ".gitignore",
      "content": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[codz]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\n.eggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\nwheels/\nshare/python-wheels/\n*.egg-info/\n.installed.cfg\n*.egg\nMANIFEST\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.nox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n*.py.cover\n.hypothesis/\n.pytest_cache/\ncover/\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\ndb.sqlite3-journal\n\n# Flask stuff:\ninstance/\n.webassets-cache\n\n# Scrapy stuff:\n.scrapy\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\n.pybuilder/\ntarget/\n\n# Jupyter Notebook\n.ipynb_checkpoints\n\n# IPython\nprofile_default/\nipython_config.py\n\n# pyenv\n#   For a library or package, you might want to ignore these files since the code is\n#   intended to run in multiple environments; otherwise, check them in:\n# .python-version\n\n# pipenv\n#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.\n#   However, in case of collaboration, if having platform-specific dependencies or dependencies\n#   having no cross-platform support, pipenv may install dependencies that don't work, or not\n#   install all needed dependencies.\n#Pipfile.lock\n\n# UV\n#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#uv.lock\n\n# poetry\n#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.\n#   This is especially recommended for binary packages to ensure reproducibility, and is more\n#   commonly ignored for libraries.\n#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control\n#poetry.lock\n#poetry.toml\n\n# pdm\n#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.\n#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.\n#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control\n#pdm.lock\n#pdm.toml\n.pdm-python\n.pdm-build/\n\n# pixi\n#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.\n#pixi.lock\n#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one\n#   in the .venv directory. It is recommended not to include this directory in version control.\n.pixi\n\n# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm\n__pypackages__/\n\n# Celery stuff\ncelerybeat-schedule\ncelerybeat.pid\n\n# SageMath parsed files\n*.sage.py\n\n# Environments\n.env\n.envrc\n.venv\nenv/\nvenv/\nENV/\nenv.bak/\nvenv.bak/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.json\n\n# Pyre type checker\n.pyre/\n\n# pytype static type analyzer\n.pytype/\n\n# Cython debug symbols\ncython_debug/\n\n# PyCharm\n#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can\n#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore\n#  and can be added to the global gitignore or merged into this file.  For a more nuclear\n#  option (not recommended) you can uncomment the following to ignore the entire idea folder.\n#.idea/\n\n# Abstra\n# Abstra is an AI-powered process automation framework.\n# Ignore directories containing user credentials, local state, and settings.\n# Learn more at https://abstra.io/docs\n.abstra/\n\n# Visual Studio Code\n#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore \n#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore\n#  and can be added to the global gitignore or merged into this file. However, if you prefer, \n#  you could uncomment the following to ignore the entire vscode folder\n# .vscode/\n\n# Ruff stuff:\n.ruff_cache/\n\n# PyPI configuration file\n.pypirc\n\n# Cursor\n#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to\n#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data\n#  refer to https://docs.cursor.com/context/ignore-files\n.cursorignore\n.cursorindexingignore\n\n# Marimo\nmarimo/_static/\nmarimo/_lsp/\n__marimo__/\n",
      "size_chars": 4688,
      "sha256": "48b33f9f89ef24f8a66f461ea9278e7ecf21b4660c26088989d231e53c578724",
      "estimated_tokens": 1172
    },
    {
      "path": ".ruff.toml",
      "content": "line-length = 100\n[lint]\nselect = [\"E\",\"F\",\"B\",\"I\",\"UP\",\"PL\"]\n",
      "size_chars": 62,
      "sha256": "0aca6dbe26e1ab772650c1b2ecc4983c3c294b9dabff6c622279bb4553aacfa5",
      "estimated_tokens": 15
    },
    {
      "path": "CNAME",
      "content": "paleae.com",
      "size_chars": 10,
      "sha256": "981bbbb3c32b6f04e284634450781ec63f81234964692b5011250100a159abed",
      "estimated_tokens": 2
    },
    {
      "path": "CODE_OF_CONDUCT.md",
      "content": "# Code of Conduct\n\n## Our Commitment\n\nWe are committed to providing a welcoming and constructive environment for all contributors to the Paleae project, regardless of experience level, background, or identity.\n\n## Expected Behavior\n\n* Be respectful in discussions and code reviews\n* Focus on technical merit and project goals\n* Provide constructive feedback with specific suggestions\n* Acknowledge different perspectives and expertise levels\n* Help newcomers get started and learn\n\n## Unacceptable Behavior\n\n* Personal attacks or inflammatory language\n* Harassment in any form\n* Publishing private information without consent\n* Off-topic discussions that derail technical conversations\n* Behavior that creates an unwelcoming environment for others\n\n## Project Focus\n\nPaleae is a technical tool with a specific purpose. Discussions should center on:\n* Code quality and functionality\n* User experience improvements  \n* Bug reports and feature requests\n* Development process and tooling\n\n## Enforcement\n\nInstances of unacceptable behavior may be reported by opening an issue or contacting the project maintainers. All reports will be reviewed and may result in:\n\n* Warning and request to modify behavior\n* Temporary restriction from project participation  \n* Permanent removal from the project\n\n## Scope\n\nThis code of conduct applies within all project spaces including GitHub repositories, issue trackers, discussions, and any other forums where the project is represented.\n\n## Attribution\n\nThis Code of Conduct is adapted from community standards for open source technical projects.",
      "size_chars": 1581,
      "sha256": "c281be8bc7402e3de5bf1ab7026015ae42a0ad172b0809e9606c57527da1e6a1",
      "estimated_tokens": 395
    },
    {
      "path": "CONTRIBUTING.md",
      "content": "# Contributing to Paleae\n\nThank you for your interest in contributing to Paleae! This project aims to make repository snapshots for AI analysis as simple and reliable as possible.\n\n## Quick Start\n\n1. **Fork and clone** the repository\n2. **Install dev dependencies**: `pip install -e .[dev]`  \n3. **Run tests**: `pytest` (should achieve 100% coverage)\n4. **Check code quality**: `ruff check . && mypy . && pydocstyle paleae.py`\n\n## Development Philosophy\n\nPaleae follows these core principles:\n\n- **Single file, zero runtime dependencies** - Keep `paleae.py` self-contained\n- **Local-first** - No network calls, no external services\n- **Predictable behavior** - Deterministic output, clear error messages\n- **Comprehensive testing** - Property-based tests with Hypothesis, 100% coverage\n\n## Types of Contributions\n\n### Bug Reports\n- Use GitHub Issues with clear reproduction steps\n- Include your OS, Python version, and example repository structure\n- Attach the problematic snapshot output if relevant\n\n### Feature Requests\n- Check existing issues first to avoid duplicates\n- Explain the use case and why it benefits AI analysis workflows\n- Consider if the feature aligns with the \"lean but powerful\" philosophy\n\n### Code Contributions\n- All changes require tests with full coverage maintained\n- Follow the existing code style (enforced by ruff)\n- Update documentation for user-facing changes\n\n## Development Setup\n\n```bash\n# Clone your fork\ngit clone https://github.com/YOUR-USERNAME/paleae.git\ncd paleae\n\n# Install in development mode\npip install -e .[dev]\n\n# Run the full test suite\npytest --cov=paleae --cov-branch --cov-report=term-missing\n\n# Check code quality\nruff check .\nmypy .\npydocstyle paleae.py\n```\n\n## Testing Guidelines\n\n- **Unit tests**: Test individual functions with clear inputs/outputs\n- **Property-based tests**: Use Hypothesis for edge cases and invariants\n- **Integration tests**: Test complete workflows with temporary directories\n- **Coverage requirement**: 100% line and branch coverage\n\nExample test pattern:\n```python\ndef test_feature_basic_case():\n    \"\"\"Test the happy path.\"\"\"\n    # Arrange, Act, Assert\n\n@given(st.text())\ndef test_feature_property(input_text):\n    \"\"\"Property-based test for edge cases.\"\"\"\n    # Test invariants that should always hold\n```\n\n## Code Style\n\n- **Line length**: 100 characters (configured in `.ruff.toml`)\n- **Type hints**: Required for all function signatures\n- **Docstrings**: Required for public functions (checked by pydocstyle)\n- **Error handling**: Use specific exceptions, avoid bare `except:`\n\n## Making Changes\n\n1. **Create a feature branch**: `git checkout -b feature/your-feature-name`\n2. **Write tests first** (TDD approach preferred)\n3. **Implement the change** while maintaining coverage\n4. **Update documentation** if user-facing behavior changes\n5. **Run the full test suite** before submitting\n\n## Pull Request Process\n\n1. **Run all checks locally**:\n   ```bash\n   pytest --cov=paleae --cov-branch\n   ruff check .\n   mypy .\n   pydocstyle paleae.py\n   ```\n\n2. **Update the version** in `paleae.py` and `pyproject.toml` if appropriate\n3. **Write a clear PR description** explaining the change and motivation\n4. **Link to related issues** using GitHub keywords (`fixes #123`)\n\n## Release Process\n\nReleases are handled by maintainers:\n1. Version bump in `paleae.py` and `pyproject.toml`\n2. Update changelog/release notes\n3. Tag release and publish to PyPI\n4. Update website if needed\n\n## Questions?\n\n- **General discussion**: GitHub Discussions\n- **Bug reports**: GitHub Issues  \n- **Quick questions**: Open an issue with the \"question\" label\n\n## License\n\nBy contributing, you agree that your contributions will be licensed under the same MIT license that covers the project.",
      "size_chars": 3749,
      "sha256": "38e5ac909e27090e14322ce4130496add4abe64b1ae4c1cf5ae99290e36c9eb8",
      "estimated_tokens": 937
    },
    {
      "path": "LICENSE",
      "content": "MIT License\n\nCopyright (c) 2025 PaulTiffany\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "size_chars": 1068,
      "sha256": "6bccd79fe55795f20a65aa183865774720a217e153032fc3948d9c53d9da3fe9",
      "estimated_tokens": 267
    },
    {
      "path": "PHILOSOPHY.md",
      "content": "# Philosophy\n\nPaleae embodies a simple conviction: **good tools should be predictable, transparent, and trustworthy**.\n\n## Core Principles\n\n### Single File, Zero Dependencies\n\nOne file. One purpose. No hidden complexity.\n\nWhen you download `paleae.py`, you get the entire tool. No package managers, no dependency trees, no version conflicts. You can read every line of code, understand exactly what it does, and trust that it will work the same way tomorrow as it does today.\n\nThis isn't a limitation—it's a feature. Constraints breed clarity.\n\n### Local-First\n\nYour code never leaves your machine during scanning. No network calls, no telemetry, no \"phone home\" behavior. Paleae runs where you run it, processes what you tell it to process, and writes output where you specify.\n\nIn an era of cloud-everything and data collection, this is a deliberate choice. Your repositories contain your ideas, your competitive advantages, your mistakes, and your breakthroughs. They shouldn't require an internet connection to analyze.\n\n### Predictable by Design\n\nPaleae produces deterministic output. The same codebase scanned twice will generate identical snapshots (modulo timestamps). File traversal follows consistent patterns. Error messages are clear and actionable.\n\nSurprises are bugs, not features.\n\n### Lean but Powerful\n\nEvery feature must justify its existence. Every line of code must serve a purpose. We resist feature creep not out of laziness, but out of respect for the core mission.\n\nThe goal isn't to build the most feature-rich repository scanner. The goal is to build the most trustworthy one.\n\n## Design Decisions\n\n### Why JSON/JSONL?\n\nStructured data beats clever formatting. JSON is universal, parseable, and future-proof. JSONL handles large repositories gracefully and streams naturally. Both formats work everywhere, with everything.\n\nHuman-readable is important, but machine-parseable is essential.\n\n### Why Regex Patterns Instead of Globs?\n\nPower users need precision. While `.paleaeignore` uses familiar glob syntax, the CLI accepts regex patterns for maximum flexibility. This dual approach serves both casual users and power users without compromise.\n\n### Why SHA-256 Hashes?\n\nTrust requires verification. Every file in the snapshot includes its SHA-256 hash, enabling you to verify the integrity of the data and detect changes over time. This isn't paranoia—it's engineering rigor.\n\n### Why No Configuration Files?\n\nConfiguration files create state. State creates complexity. Complexity breaks predictability.\n\nPaleae takes its instructions from command-line arguments and `.paleaeignore` files that live alongside your code. Everything else is convention and sensible defaults.\n\n## What Paleae Is Not\n\n- **Not a code analysis tool.** It snapshots, it doesn't analyze.\n- **Not a backup solution.** It captures text content, not complete repository state.\n- **Not a deployment tool.** It creates data for other systems to consume.\n- **Not a cloud service.** It's a local utility that respects local control.\n\n## The Grain Metaphor\n\n\"Paleae\" refers to the chaff that surrounds grain—the protective husks that must be separated to reveal the valuable core.\n\nYour repository contains signal and noise, essential files and build artifacts, documentation and debris. Paleae helps you separate the grain from the chaff, creating clean snapshots that highlight what matters for AI analysis.\n\nLike traditional winnowing, this process requires judgment. That's why Paleae gives you precise control over what gets included and what gets filtered out.\n\n## Long-term Thinking\n\nSoftware tools often grow until they collapse under their own weight. Paleae chooses a different path: **sustainable minimalism**.\n\nWe will:\n- Resist feature requests that compromise core principles\n- Maintain backward compatibility aggressively\n- Keep the single-file constraint inviolate\n- Prioritize reliability over novelty\n\nThe best tools become invisible infrastructure. They work so consistently that you stop thinking about them and focus on your actual work instead.\n\nThat's the goal.",
      "size_chars": 4079,
      "sha256": "c808694203627bafa005a589a0f5cb3216cc9f897edd6777d1faa151798f2727",
      "estimated_tokens": 1019
    },
    {
      "path": "README.md",
      "content": "<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"./assets/paleae-badge-dark.svg\">\n    <img alt=\"Paleae — Ship your repo to your AI\" src=\"./assets/paleae-badge-light.svg\" width=\"230\">\n  </picture>\n</p>\n\n<p align=\"center\">\n  <strong>Snapshot your codebase into compact JSON/JSONL — perfect for LLMs.</strong>\n  <br>\n  Single file. Zero dependencies. No install.\n</p>\n\n<p align=\"center\">\n  <!-- TODO: Update username/repo in the CI badge URL -->\n  <a href=\"https://github.com/PaulTiffany/paleae/actions/workflows/ci.yml\">\n    <img src=\"https://github.com/PaulTiffany/paleae/actions/workflows/ci.yml/badge.svg\" alt=\"CI Status\">\n  </a>\n  <a href=\"https://pypi.org/project/paleae/\">\n    <img src=\"https://img.shields.io/pypi/v/paleae.svg?color=5EE1A0&label=pypi%20package\" alt=\"PyPI version\">\n  </a>\n  <a href=\"https://pypi.org/project/paleae/\">\n    <img src=\"https://img.shields.io/pypi/pyversions/paleae.svg\" alt=\"Python versions\">\n  </a>\n  <a href=\"./LICENSE\">\n    <img src=\"https://img.shields.io/badge/license-MIT-informational.svg\" alt=\"MIT License\">\n  </a>\n</p>\n\n---\n\n`paleae` is a single-file, zero-dependency utility that scans your repository and creates a structured snapshot optimized for AI analysis. It's designed to be simple, transparent, and trustworthy.\n\n## Key Features\n\n*   **Single File, Zero Deps:** Drop `paleae.py` into any project. It runs anywhere Python runs, with no `pip install` required.\n*   **Local-First:** Scans files on your machine. No code is ever sent over the network.\n*   **Structured Output:** Generates clean `JSON` or `JSONL`, including file paths, content, and SHA-256 hashes.\n*   **Configurable:** Use powerful include/exclude regex patterns and a `.paleaeignore` file (with `!` negation) to precisely control what gets included.\n*   **Rigorously Tested:** 100% line and branch coverage, fully type-checked with MyPy, linted with Ruff, and hardened with Hypothesis property-based tests and `pydocstyle` compliance.\n\n## Quick Start\n\nNo installation needed. Just download and run.\n\n```bash\n# Download the script\ncurl -fsSL https://raw.githubusercontent.com/PaulTiffany/paleae/main/paleae.py -o paleae.py\n\n# Snapshot the current directory\npython paleae.py\n```\n\nThis will create a `repo_snapshot.json` file in your current directory.\n\n## Usage\n\n```\nusage: paleae [-h] [-o OUT] [-f {json,jsonl}] [--profile {minimal,ai_optimized}]\n              [--include INCLUDE] [--exclude EXCLUDE] [--version] [--about]\n              [directory]\n\nCreate JSON/JSONL snapshot of your repo for LLMs\n\npositional arguments:\n  directory             Directory to snapshot (default: .)\n\noptions:\n  -h, --help            show this help message and exit\n  -o, --out OUT         Output file (auto-named if not specified)\n  -f, --format {json,jsonl}\n                        Output format\n  --profile {minimal,ai_optimized}\n                        File inclusion profile\n  --include INCLUDE     Extra include regex (repeatable)\n  --exclude EXCLUDE     Extra exclude regex (repeatable)\n  --version             show program's version number and exit\n  --about               Show project info and exit\n```\n\n### Examples\n\n**Snapshot to a specific JSONL file:**\n```bash\npython paleae.py -f jsonl -o my_project.jsonl\n```\n\n**Use the `ai_optimized` profile to include only core source and config files:**\n```bash\npython paleae.py --profile ai_optimized\n```\n\n**Add a specific directory to the snapshot using a regex:**\n```bash\npython paleae.py --include \"^(docs|examples)/\"\n```\n\n## Configuration (`.paleaeignore`)\n\nCreate a `.paleaeignore` file in your project's root directory to exclude files and directories. The syntax is similar to `.gitignore`.\n\n```\n# .paleaeignore\n\n# Ignore build artifacts and logs\nbuild/\ndist/\n*.log\n\n# But force-include an important log file\n!important.log\n```\n\n## Output Format\n\nThe snapshot contains metadata and a list of file objects.\n\n```json\n{\n  \"meta\": {\n    \"tool\": \"paleae\",\n    \"version\": \"1.2.0\",\n    \"timestamp\": \"2025-09-16T20:00:00Z\",\n    \"root_directory\": \"/path/to/your/project\",\n    \"summary\": {\n      \"total_files\": 42,\n      \"total_chars\": 123456,\n      \"estimated_tokens\": 30864\n    }\n  },\n  \"files\": [\n    {\n      \"path\": \"src/main.py\",\n      \"content\": \"print('hello')\",\n      \"size_chars\": 14,\n      \"sha256\": \"b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9\",\n      \"estimated_tokens\": 3\n    }\n  ]\n}\n```\n\n## License\n\nThis project is licensed under the [MIT License](./LICENSE).\n\nThe brand assets (`assets/*.svg`) are dedicated to the public domain under [CC0 1.0 Universal](./assets/LICENSE.txt).\n",
      "size_chars": 4603,
      "sha256": "16517a6de3e2cebb11fc5af32180a1f493058485bb30436fb02020a57bd96cd9",
      "estimated_tokens": 1150
    },
    {
      "path": "assets/LICENSE.txt",
      "content": "CC0 1.0 Universal (Public Domain Dedication)\n\nTo the extent possible under law, the creator has waived all copyright and related or neighboring rights to\nthe following files, placing them in the public domain:\n\n- paleae-mark.svg\n- paleae-favicon.svg\n- paleae-badge-light.svg\n- paleae-badge-dark.svg\n- paleae-social-card.svg\n\nNo rights reserved.\n",
      "size_chars": 345,
      "sha256": "eca0da9daf76123edd88b1a0398d83f02180d0ab78223b2ac0826a334bd3164b",
      "estimated_tokens": 86
    },
    {
      "path": "assets/ORIGIN.md",
      "content": "# Paleae Brand Assets — Provenance\n\nThese SVG assets were created programmatically in this ChatGPT session on 2025-09-16.\nThey were not copied, traced, or derived from any third‑party logo or trademark. The designs are built from\nbasic geometric paths (lines and arcs) arranged into an abstract wheat-sheaf mark and supporting badges.\n\nFiles:\n- paleae-mark.svg\n- paleae-favicon.svg\n- paleae-badge-light.svg\n- paleae-badge-dark.svg\n- paleae-social-card.svg\n\nSuggested usage:\n- Use paleae-mark.svg inline (inherits currentColor) or as an <img> in headers.\n- Use paleae-favicon.svg as the site favicon.\n- Use badge light/dark in README and marketing.\n- Use paleae-social-card.svg for Open Graph / Twitter.\n\nLicense: CC0 (Public Domain). You may modify, redistribute, or use commercially without attribution.\n",
      "size_chars": 805,
      "sha256": "de3bf39116cd2e463409c3f96f20371d4a8478d3b76cebeb26bff6e2e18beac8",
      "estimated_tokens": 201
    },
    {
      "path": "assets/README.txt",
      "content": "Paleae Brand Pack\n===================\n\nContents:\n- paleae-mark.svg\n- paleae-favicon.svg\n- paleae-badge-light.svg\n- paleae-badge-dark.svg\n- paleae-social-card.svg\n\nColors:\n- Brand accent: #5EE1A0\n- Dark BG ramp: #0A0B0D → #15181C\n- Light FG: #F3F5F7\n- Dark FG: #0E1012\n\nTips:\n- The mark is stroke-based; it inherits currentColor, so it adapts to dark/light themes.\n- For maximum social preview compatibility, export the social card SVG to PNG (1200x630).",
      "size_chars": 453,
      "sha256": "8702da54dace7585317a7cafc9203a042be6777ba063844cdfe594b666b75737",
      "estimated_tokens": 113
    },
    {
      "path": "assets/paleae-badge-dark.svg",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"230\" height=\"40\" viewBox=\"0 0 230 40\" role=\"img\" aria-label=\"Paleae — Ship your repo to your AI\">\n  <title>Paleae — Ship your repo to your AI</title>\n  <defs>\n    <linearGradient id=\"pillD\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n      <stop offset=\"0\" stop-color=\"#0f1216\"/>\n      <stop offset=\"1\" stop-color=\"#0a0b0d\"/>\n    </linearGradient>\n    <linearGradient id=\"grainD\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n      <stop offset=\"0\" stop-color=\"#63e6a5\"/>\n      <stop offset=\"1\" stop-color=\"#41c98a\"/>\n    </linearGradient>\n  </defs>\n  <g>\n    <rect x=\"0.75\" y=\"0.75\" width=\"228.5\" height=\"38.5\" rx=\"20\" fill=\"url(#pillD)\" stroke=\"#22262b\" stroke-width=\"1.5\"/>\n    <!-- icon circle -->\n    <circle cx=\"24\" cy=\"20\" r=\"12\" fill=\"url(#grainD)\" />\n    <!-- wheat icon -->\n    <g transform=\"translate(12,8)\" fill=\"none\" stroke=\"#f3f5f7\" stroke-width=\"1.8\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n      <path d=\"M12 3v18\"/>\n      <path d=\"M12 6L7.5 8\"/>\n      <path d=\"M12 9L7.5 11\"/>\n      <path d=\"M12 12L7.5 14\"/>\n      <path d=\"M12 15L7.5 17\"/>\n      <path d=\"M12 6L16.5 8\"/>\n      <path d=\"M12 9L16.5 11\"/>\n      <path d=\"M12 12L16.5 14\"/>\n      <path d=\"M12 15L16.5 17\"/>\n    </g>\n    <!-- wordmark -->\n    <g fill=\"#f3f5f7\">\n      <text x=\"46\" y=\"17.5\" font-family=\"Inter, Segoe UI, system-ui, -apple-system, Arial, sans-serif\" font-size=\"14\" font-weight=\"800\" letter-spacing=\".6\">PALEAE</text>\n      <text x=\"46\" y=\"30\" font-family=\"Inter, Segoe UI, system-ui, -apple-system, Arial, sans-serif\" font-size=\"11\" fill=\"#a1a8b1\">Ship your repo to your AI</text>\n    </g>\n  </g>\n</svg>\n",
      "size_chars": 1661,
      "sha256": "dcbe8ded8379fa517d7d326571a460d9c99ecb10b8f50bd4c07f344eb3058c22",
      "estimated_tokens": 415
    },
    {
      "path": "assets/paleae-badge-light.svg",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"230\" height=\"40\" viewBox=\"0 0 230 40\" role=\"img\" aria-label=\"Paleae — Ship your repo to your AI\">\n  <title>Paleae — Ship your repo to your AI</title>\n  <defs>\n    <linearGradient id=\"pill\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n      <stop offset=\"0\" stop-color=\"#ffffff\"/>\n      <stop offset=\"1\" stop-color=\"#f8fafc\"/>\n    </linearGradient>\n    <linearGradient id=\"grain\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n      <stop offset=\"0\" stop-color=\"#63e6a5\"/>\n      <stop offset=\"1\" stop-color=\"#41c98a\"/>\n    </linearGradient>\n  </defs>\n  <g>\n    <rect x=\"0.75\" y=\"0.75\" width=\"228.5\" height=\"38.5\" rx=\"20\" fill=\"url(#pill)\" stroke=\"#e6e8eb\" stroke-width=\"1.5\"/>\n    <!-- icon circle -->\n    <circle cx=\"24\" cy=\"20\" r=\"12\" fill=\"url(#grain)\" />\n    <!-- wheat icon -->\n    <g transform=\"translate(12,8)\" fill=\"none\" stroke=\"#0e1012\" stroke-width=\"1.8\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n      <path d=\"M12 3v18\"/>\n      <path d=\"M12 6L7.5 8\"/>\n      <path d=\"M12 9L7.5 11\"/>\n      <path d=\"M12 12L7.5 14\"/>\n      <path d=\"M12 15L7.5 17\"/>\n      <path d=\"M12 6L16.5 8\"/>\n      <path d=\"M12 9L16.5 11\"/>\n      <path d=\"M12 12L16.5 14\"/>\n      <path d=\"M12 15L16.5 17\"/>\n    </g>\n    <!-- wordmark -->\n    <g fill=\"#0e1012\">\n      <text x=\"46\" y=\"17.5\" font-family=\"Inter, Segoe UI, system-ui, -apple-system, Arial, sans-serif\" font-size=\"14\" font-weight=\"800\" letter-spacing=\".6\">PALEAE</text>\n      <text x=\"46\" y=\"30\" font-family=\"Inter, Segoe UI, system-ui, -apple-system, Arial, sans-serif\" font-size=\"11\" fill=\"#646b74\">Ship your repo to your AI</text>\n    </g>\n  </g>\n</svg>\n",
      "size_chars": 1657,
      "sha256": "12c01eac801821e4f5965d56b6f520204ad9c79e3910aad5593add132587e486",
      "estimated_tokens": 414
    },
    {
      "path": "assets/paleae-favicon.svg",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"64\" height=\"64\" viewBox=\"0 0 64 64\" xmlns=\"http://www.w3.org/2000/svg\">\n  <defs>\n    <linearGradient id=\"bg\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n      <stop offset=\"0\" stop-color=\"#0a0b0d\"/>\n      <stop offset=\"1\" stop-color=\"#15181c\"/>\n    </linearGradient>\n  </defs>\n  <rect x=\"2\" y=\"2\" width=\"60\" height=\"60\" rx=\"14\" fill=\"url(#bg)\"/>\n  <!-- Icon (wheat) in brand green -->\n  <g transform=\"translate(20,12)\" fill=\"none\" stroke=\"#5ee1a0\" stroke-width=\"3\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M12 4v32\"/>\n    <path d=\"M12 8L4 12\"/>\n    <path d=\"M12 12L4 16\"/>\n    <path d=\"M12 16L4 20\"/>\n    <path d=\"M12 20L4 24\"/>\n    <path d=\"M12 24L4 28\"/>\n    <path d=\"M12 8L20 12\"/>\n    <path d=\"M12 12L20 16\"/>\n    <path d=\"M12 16L20 20\"/>\n    <path d=\"M12 20L20 24\"/>\n    <path d=\"M12 24L20 28\"/>\n  </g>\n</svg>\n",
      "size_chars": 871,
      "sha256": "8fe0483f3c0631f4cefa5e5613cc485ffc92d1306ad1d3d0c6a8961289781a5d",
      "estimated_tokens": 217
    },
    {
      "path": "assets/paleae-mark.svg",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n     xmlns=\"http://www.w3.org/2000/svg\" aria-hidden=\"true\">\n  <g stroke=\"currentColor\" stroke-width=\"1.75\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <!-- stem -->\n    <path d=\"M12 3v18\"/>\n    <!-- left leaves -->\n    <path d=\"M12 6L7.5 8\"/>\n    <path d=\"M12 9L7.5 11\"/>\n    <path d=\"M12 12L7.5 14\"/>\n    <path d=\"M12 15L7.5 17\"/>\n    <path d=\"M12 18L7.5 20\"/>\n    <!-- right leaves -->\n    <path d=\"M12 6L16.5 8\"/>\n    <path d=\"M12 9L16.5 11\"/>\n    <path d=\"M12 12L16.5 14\"/>\n    <path d=\"M12 15L16.5 17\"/>\n    <path d=\"M12 18L16.5 20\"/>\n  </g>\n</svg>\n",
      "size_chars": 661,
      "sha256": "a1daa4e041a804fdf89ddb9fbb3ddc3a1f0519cbdcfd5912b4d423849563951a",
      "estimated_tokens": 165
    },
    {
      "path": "assets/paleae-social-card.svg",
      "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1200\" height=\"630\" viewBox=\"0 0 1200 630\" role=\"img\" aria-label=\"Paleae — Ship your repo to your AI\">\n  <defs>\n    <linearGradient id=\"bg\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n      <stop offset=\"0\" stop-color=\"#0a0b0d\"/>\n      <stop offset=\"1\" stop-color=\"#14181c\"/>\n    </linearGradient>\n    <linearGradient id=\"grain\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n      <stop offset=\"0\" stop-color=\"#63e6a5\"/>\n      <stop offset=\"1\" stop-color=\"#41c98a\"/>\n    </linearGradient>\n  </defs>\n  <rect width=\"1200\" height=\"630\" fill=\"url(#bg)\"/>\n  <!-- glow -->\n  <ellipse cx=\"380\" cy=\"300\" rx=\"300\" ry=\"220\" fill=\"#5ee1a0\" opacity=\"0.10\"/>\n  <!-- icon circle -->\n  <circle cx=\"380\" cy=\"300\" r=\"120\" fill=\"url(#grain)\"/>\n  <!-- wheat icon enlarged -->\n  <g transform=\"translate(308,225)\" fill=\"none\" stroke=\"#0e1012\" stroke-width=\"9\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path d=\"M120 20v170\"/>\n    <path d=\"M120 40L80 60\"/>\n    <path d=\"M120 70L80 90\"/>\n    <path d=\"M120 100L80 120\"/>\n    <path d=\"M120 130L80 150\"/>\n    <path d=\"M120 40L160 60\"/>\n    <path d=\"M120 70L160 90\"/>\n    <path d=\"M120 100L160 120\"/>\n    <path d=\"M120 130L160 150\"/>\n  </g>\n  <!-- title and tagline -->\n  <g fill=\"#f3f5f7\">\n    <text x=\"560\" y=\"300\" font-family=\"Inter, Segoe UI, system-ui, -apple-system, Arial, sans-serif\" font-size=\"86\" font-weight=\"900\" letter-spacing=\"-1\">Paleae</text>\n    <text x=\"560\" y=\"360\" font-family=\"Inter, Segoe UI, system-ui, -apple-system, Arial, sans-serif\" font-size=\"30\" fill=\"#c7cbd1\">Ship your repo to your AI</text>\n  </g>\n  <!-- footer -->\n  <g fill=\"#a1a8b1\" font-family=\"Inter, Segoe UI, system-ui, -apple-system, Arial, sans-serif\" font-size=\"22\">\n    <text x=\"560\" y=\"410\">Single file · Zero deps · JSON/JSONL snapshots</text>\n    <text x=\"560\" y=\"446\">paleae.com</text>\n  </g>\n</svg>\n",
      "size_chars": 1883,
      "sha256": "e54ab37721645cada098e2992d250f42f5e1fce6ebf9d1c526e7aa572887b591",
      "estimated_tokens": 470
    },
    {
      "path": "cosmic-ray.toml",
      "content": "[cosmic-ray]\nmodule-path = \"paleae\"\ntest-command = \"pytest\"\ntimeout = 30.0\n\n[cosmic-ray.distributor]\nname = \"local\"\n",
      "size_chars": 116,
      "sha256": "8d9299bfef0c18f7548ffeae6c79b493893c57f83156bf1605864dd5de713035",
      "estimated_tokens": 29
    },
    {
      "path": "cr.toml",
      "content": "[cosmic-ray]\nmodule = \"paleae\"\ntimeout = 10.0\nexcluded-modules = [\"tests*\"]\nmodule-path = \".\"\ntest-command = \"paleae/.venv/Scripts/python.exe -m pytest -q\"\n\n[execution]\nengine = \"local\"\n\n[cosmic-ray.distributor]\nname = \"local\"\n",
      "size_chars": 227,
      "sha256": "22dfcd5dda041b1ed5096b9cda81d84449a0e9be2ce360c7d8c7344c379596df",
      "estimated_tokens": 56
    },
    {
      "path": "index.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\" data-theme=\"light\">\n<head>\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, viewport-fit=cover\">\n  <title>Paleae – Ship your repo to your AI</title>\n  <meta name=\"description\" content=\"Single-file tool that snapshots your codebase into clean JSON/JSONL for AI analysis. Zero dependencies, local-only, predictable output.\">\n  <link rel=\"icon\" type=\"image/svg+xml\" href=\"https://paleae.com/assets/paleae-favicon.svg\">\n  <meta name=\"theme-color\" content=\"#0a0b0d\">\n\n  <!-- Social -->\n  <meta property=\"og:title\" content=\"Paleae – Ship your repo to your AI\">\n  <meta property=\"og:description\" content=\"Single file. Zero deps. JSON/JSONL snapshots. Local-only tool for AI-ready codebase analysis.\">\n  <meta property=\"og:type\" content=\"website\">\n  <meta property=\"og:image\" content=\"https://paleae.com/assets/paleae-social-card.svg\">\n  <meta name=\"twitter:card\" content=\"summary_large_image\">\n  <meta name=\"twitter:image\" content=\"https://paleae.com/assets/paleae-social-card.svg\">\n\n  <style>\n    :root {\n      --bg: #0a0b0d;\n      --fg: #f3f5f7;\n      --muted: #a1a8b1;\n      --line: #22262b;\n      --accent: #5ee1a0;\n      --block: color-mix(in srgb, var(--fg) 4%, var(--bg));\n      --glow: color-mix(in srgb, var(--accent) 15%, transparent);\n      --radius: 16px;\n      --shadow: 0 8px 32px rgba(0,0,0,.4);\n      --shadow-sm: 0 2px 8px rgba(0,0,0,.2);\n    }\n\n    @media (prefers-color-scheme: light) {\n      :root {\n        --bg: #ffffff;\n        --fg: #0e1012;\n        --muted: #646b74;\n        --line: #e6e8eb;\n        --block: color-mix(in srgb, var(--fg) 4%, var(--bg));\n        --glow: color-mix(in srgb, var(--accent) 8%, transparent);\n        --shadow: 0 8px 32px rgba(0,0,0,.08);\n        --shadow-sm: 0 2px 8px rgba(0,0,0,.04);\n      }\n    }\n\n    :root[data-theme=\"dark\"] {\n      --bg: #0a0b0d;\n      --fg: #f3f5f7;\n      --muted: #a1a8b1;\n      --line: #22262b;\n      --block: color-mix(in srgb, var(--fg) 4%, var(--bg));\n      --glow: color-mix(in srgb, var(--accent) 15%, transparent);\n      --shadow: 0 8px 32px rgba(0,0,0,.4);\n      --shadow-sm: 0 2px 8px rgba(0,0,0,.2);\n    }\n\n    :root[data-theme=\"light\"] {\n      --bg: #ffffff;\n      --fg: #0e1012;\n      --muted: #646b74;\n      --line: #e6e8eb;\n      --block: color-mix(in srgb, var(--fg) 4%, var(--bg));\n      --glow: color-mix(in srgb, var(--accent) 8%, transparent);\n      --shadow: 0 8px 32px rgba(0,0,0,.08);\n      --shadow-sm: 0 2px 8px rgba(0,0,0,.04);\n    }\n\n    * {\n      box-sizing: border-box;\n    }\n\n    html, body {\n      height: 100%;\n      margin: 0;\n    }\n\n    body {\n      font: 16px/1.6 ui-sans-serif, system-ui, -apple-system, \"Segoe UI\", Roboto, Inter, \"Helvetica Neue\", Arial, sans-serif;\n      color: var(--fg);\n      background: radial-gradient(ellipse 1400px 800px at 50% -20%, var(--glow), transparent),\n                  linear-gradient(180deg, var(--bg), color-mix(in srgb, var(--line) 30%, var(--bg)));\n      text-rendering: optimizelegibility;\n      -webkit-font-smoothing: antialiased;\n      overflow-x: hidden;\n    }\n\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 0 24px;\n    }\n\n    header {\n      position: sticky;\n      top: 0;\n      z-index: 100;\n      backdrop-filter: blur(20px) saturate(180%);\n      background: color-mix(in srgb, var(--bg) 85%, transparent);\n      border-bottom: 1px solid color-mix(in srgb, var(--line) 50%, transparent);\n    }\n\n    .header-content {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      padding: 16px 0;\n      gap: 20px;\n    }\n\n    .brand {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      font-weight: 900;\n      font-size: 18px;\n      letter-spacing: -0.3px;\n      text-decoration: none;\n      color: var(--fg);\n    }\n\n    .brand svg {\n      width: 24px;\n      height: 24px;\n    }\n\n    .nav {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n    }\n\n    .nav-link {\n      padding: 8px 16px;\n      border-radius: 8px;\n      text-decoration: none;\n      color: var(--muted);\n      transition: 0.2s;\n    }\n\n    .nav-link:hover {\n      color: var(--fg);\n      background: var(--block);\n    }\n\n    .theme-btn {\n      background: var(--block);\n      border: 1px solid var(--line);\n      color: var(--fg);\n      border-radius: 8px;\n      padding: 8px;\n      cursor: pointer;\n      transition: 0.2s;\n    }\n\n    .theme-btn:hover {\n      transform: translateY(-1px);\n      box-shadow: var(--shadow-sm);\n    }\n\n    .hero {\n      padding: 80px 0 120px;\n      text-align: center;\n      background: radial-gradient(circle at 50% 50%, var(--glow), transparent 70%);\n    }\n\n    .hero h1 {\n      font-size: clamp(2.5rem, 7vw, 5rem);\n      font-weight: 900;\n      letter-spacing: -0.02em;\n      line-height: 1.1;\n      margin: 0 0 24px;\n      background: linear-gradient(135deg, var(--fg), color-mix(in srgb, var(--accent) 60%, var(--fg)));\n      -webkit-background-clip: text;\n      background-clip: text;\n      -webkit-text-fill-color: transparent;\n    }\n\n    .hero .subtitle {\n      font-size: clamp(1.2rem, 3vw, 1.5rem);\n      color: var(--muted);\n      max-width: 800px;\n      margin: 0 auto 40px;\n      line-height: 1.4;\n    }\n\n    .cta-group {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      gap: 16px;\n      flex-wrap: wrap;\n      margin: 40px 0;\n    }\n\n    .btn {\n      display: inline-flex;\n      align-items: center;\n      gap: 10px;\n      padding: 16px 24px;\n      border-radius: 12px;\n      text-decoration: none;\n      font-weight: 600;\n      transition: 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);\n      border: 1px solid var(--line);\n      background: var(--block);\n      color: var(--fg);\n      cursor: pointer;\n    }\n\n    .btn:hover {\n      transform: translateY(-2px);\n      box-shadow: var(--shadow);\n    }\n\n    .btn.primary {\n      background: linear-gradient(135deg, \n                  color-mix(in srgb, var(--accent) 20%, var(--bg)),\n                  color-mix(in srgb, var(--accent) 10%, var(--bg)));\n      border-color: color-mix(in srgb, var(--accent) 40%, var(--line));\n      box-shadow: 0 0 0 1px color-mix(in srgb, var(--accent) 20%, transparent),\n                  inset 0 1px 0 color-mix(in srgb, var(--accent) 15%, transparent);\n    }\n\n    .btn.primary:hover {\n      background: linear-gradient(135deg, \n                  color-mix(in srgb, var(--accent) 25%, var(--bg)),\n                  color-mix(in srgb, var(--accent) 15%, var(--bg)));\n      box-shadow: var(--shadow), 0 0 0 1px color-mix(in srgb, var(--accent) 30%, transparent);\n    }\n\n    .pulse-dot {\n      width: 8px;\n      height: 8px;\n      background: var(--accent);\n      border-radius: 50%;\n      animation: pulse 2s ease infinite;\n    }\n\n    @keyframes pulse {\n      0%, 100% { opacity: 1; transform: scale(1); }\n      50% { opacity: 0.6; transform: scale(1.2); }\n    }\n\n    .badges {\n      display: flex;\n      justify-content: center;\n      gap: 8px;\n      flex-wrap: wrap;\n      margin-top: 32px;\n    }\n\n    .badge {\n      display: inline-flex;\n      align-items: center;\n      gap: 6px;\n      padding: 6px 12px;\n      background: var(--block);\n      border: 1px solid var(--line);\n      border-radius: 20px;\n      font-size: 13px;\n      color: var(--muted);\n    }\n\n    .quick-start {\n      padding: 80px 0;\n      background: var(--block);\n      border-top: 1px solid var(--line);\n      border-bottom: 1px solid var(--line);\n    }\n\n    .section-header {\n      text-align: center;\n      margin-bottom: 48px;\n    }\n\n    .section-header h2 {\n      font-size: 2.5rem;\n      font-weight: 800;\n      margin: 0 0 16px;\n      letter-spacing: -0.02em;\n    }\n\n    .section-header p {\n      font-size: 1.1rem;\n      color: var(--muted);\n      margin: 0;\n    }\n\n    .command-demo {\n      max-width: 800px;\n      margin: 0 auto;\n      background: color-mix(in srgb, var(--fg) 8%, var(--bg));\n      border: 1px solid var(--line);\n      border-radius: var(--radius);\n      padding: 24px;\n      position: relative;\n      overflow: hidden;\n    }\n\n    .command-demo::before {\n      content: \"\";\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      height: 1px;\n      background: linear-gradient(90deg, transparent, var(--accent), transparent);\n    }\n\n    .command-line {\n      font-family: ui-monospace, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace;\n      font-size: 16px;\n      color: var(--accent);\n      background: none;\n      border: none;\n      width: 100%;\n      outline: none;\n      cursor: text;\n    }\n\n    .copy-btn {\n      position: absolute;\n      top: 16px;\n      right: 16px;\n      background: var(--bg);\n      border: 1px solid var(--line);\n      color: var(--muted);\n      border-radius: 6px;\n      padding: 6px 10px;\n      font-size: 12px;\n      cursor: pointer;\n      transition: 0.2s;\n    }\n\n    .copy-btn:hover {\n      color: var(--fg);\n      background: var(--block);\n    }\n\n    .features {\n      padding: 80px 0;\n    }\n\n    .grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n      gap: 24px;\n      margin-top: 48px;\n    }\n\n    .card {\n      background: var(--block);\n      border: 1px solid var(--line);\n      border-radius: var(--radius);\n      padding: 24px;\n      transition: 0.3s;\n    }\n\n    .card:hover {\n      transform: translateY(-4px);\n      box-shadow: var(--shadow);\n      border-color: color-mix(in srgb, var(--accent) 30%, var(--line));\n    }\n\n    .card h3 {\n      margin: 0 0 12px;\n      font-size: 1.25rem;\n      font-weight: 700;\n    }\n\n    .card p {\n      margin: 0;\n      color: var(--muted);\n      line-height: 1.6;\n    }\n\n    .philosophy {\n      padding: 80px 0;\n      background: linear-gradient(135deg, \n                  color-mix(in srgb, var(--accent) 5%, var(--bg)),\n                  var(--bg));\n      border-top: 1px solid var(--line);\n    }\n\n    .philosophy-content {\n      max-width: 900px;\n      margin: 0 auto;\n      text-align: center;\n    }\n\n    .philosophy h2 {\n      font-size: 2.5rem;\n      font-weight: 800;\n      margin: 0 0 24px;\n      letter-spacing: -0.02em;\n    }\n\n    .philosophy-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n      gap: 32px;\n      margin-top: 48px;\n      text-align: left;\n    }\n\n    .principle {\n      background: var(--block);\n      border: 1px solid var(--line);\n      border-radius: var(--radius);\n      padding: 24px;\n    }\n\n    .principle h4 {\n      margin: 0 0 12px;\n      font-size: 1.1rem;\n      font-weight: 700;\n      color: var(--accent);\n    }\n\n    .principle p {\n      margin: 0;\n      color: var(--muted);\n      font-size: 0.95rem;\n      line-height: 1.6;\n    }\n\n    footer {\n      padding: 60px 0 40px;\n      border-top: 1px solid var(--line);\n      background: var(--block);\n    }\n\n    .footer-content {\n      text-align: center;\n    }\n\n    .footer-links {\n      display: flex;\n      justify-content: center;\n      gap: 24px;\n      margin-bottom: 24px;\n      flex-wrap: wrap;\n    }\n\n    .footer-links a {\n      color: var(--muted);\n      text-decoration: none;\n      transition: color 0.2s;\n    }\n\n    .footer-links a:hover {\n      color: var(--fg);\n    }\n\n    .copyright {\n      color: var(--muted);\n      font-size: 14px;\n    }\n\n    @media (max-width: 768px) {\n      .container {\n        padding: 0 16px;\n      }\n      .header-content {\n        padding: 12px 0;\n      }\n      .hero {\n        padding: 60px 0 80px;\n      }\n      .section-header h2 {\n        font-size: 2rem;\n      }\n      .philosophy h2 {\n        font-size: 2rem;\n      }\n      .cta-group {\n        gap: 12px;\n      }\n      .btn {\n        padding: 14px 20px;\n      }\n      .command-demo {\n        padding: 20px;\n        margin: 0 16px;\n      }\n    }\n\n    .btn:focus-visible, .theme-btn:focus-visible, .copy-btn:focus-visible {\n      outline: 2px solid var(--accent);\n      outline-offset: 2px;\n    }\n\n    .download-status {\n      font-size: 12px;\n      color: var(--muted);\n      margin-top: 4px;\n      opacity: 0;\n      transition: opacity 0.3s;\n    }\n\n    .download-status.show {\n      opacity: 1;\n    }\n  </style>\n</head>\n<body>\n  <header>\n    <div class=\"container\">\n      <div class=\"header-content\">\n        <a href=\"https://paleae.com/\" class=\"brand\">\n          <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.75\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M12 3v18\"></path>\n            <path d=\"M12 6L7.5 8\"></path><path d=\"M12 9L7.5 11\"></path><path d=\"M12 12L7.5 14\"></path><path d=\"M12 15L7.5 17\"></path><path d=\"M12 18L7.5 20\"></path>\n            <path d=\"M12 6L16.5 8\"></path><path d=\"M12 9L16.5 11\"></path><path d=\"M12 12L16.5 14\"></path><path d=\"M12 15L16.5 17\"></path><path d=\"M12 18L16.5 20\"></path>\n          </svg>\n          Paleae\n        </a>\n        <nav class=\"nav\">\n          <a href=\"https://github.com/PaulTiffany/paleae\" class=\"nav-link\" target=\"_blank\" rel=\"noopener\">GitHub</a>\n          <button class=\"theme-btn\" id=\"theme-toggle\" title=\"Toggle theme\">\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n              <circle cx=\"12\" cy=\"12\" r=\"5\"></circle><path d=\"M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42\"></path>\n            </svg>\n          </button>\n        </nav>\n      </div>\n    </div>\n  </header>\n\n  <main>\n    <section class=\"hero\">\n      <div class=\"container\">\n        <h1>Ship your repo to your AI</h1>\n        <p class=\"subtitle\">\n          Paleae snapshots your codebase into clean JSON/JSONL—perfect for AI analysis. \n          Single file, zero dependencies, local-only processing.\n        </p>\n        \n        <div class=\"cta-group\">\n          <button class=\"btn primary\" id=\"download-btn\">\n            <div class=\"pulse-dot\"></div>\n            Download paleae.py\n            <div class=\"download-status\" id=\"download-status\"></div>\n          </button>\n          <a href=\"#quickstart\" class=\"btn\">\n            Get Started\n          </a>\n        </div>\n\n        <div class=\"badges\">\n          <span class=\"badge\">Single file</span>\n          <span class=\"badge\">Zero dependencies</span>\n          <span class=\"badge\">Local-only</span>\n          <span class=\"badge\">MIT License</span>\n          <span class=\"badge\">AI-Ready</span>\n          <span class=\"badge\">LLM Context</span>\n          <span class=\"badge\">Python Tool</span>\n          <span class=\"badge\">JSON/JSONL Output</span>\n          <span class=\"badge\" id=\"version-badge\">v1.2.0</span>\n          <span class=\"badge\" id=\"size-badge\">~11KB</span>\n        </div>\n      </div>\n    </section>\n\n    <section class=\"quick-start\" id=\"quickstart\">\n      <div class=\"container\">\n        <div class=\"section-header\">\n          <h2>No install required</h2>\n          <p>Download and run. It's that simple.</p>\n        </div>\n        \n        <div class=\"command-demo\">\n          <input type=\"text\" class=\"command-line\" value=\"curl -fsSL https://raw.githubusercontent.com/PaulTiffany/paleae/main/paleae.py -o paleae.py && python paleae.py\" readonly>\n          <button class=\"copy-btn\" data-copy-target=\".command-line\">Copy</button>\n        </div>\n      </div>\n    </section>\n\n    <section class=\"features\">\n      <div class=\"container\">\n        <div class=\"section-header\">\n          <h2>Built for trust</h2>\n          <p>Every design decision prioritizes transparency and reliability</p>\n        </div>\n        \n        <div class=\"grid\">\n          <div class=\"card\">\n            <h3>Single File Architecture</h3>\n            <p>One file contains everything. No hidden dependencies, no package complexity. You can read every line of code and know exactly what it does.</p>\n          </div>\n          \n          <div class=\"card\">\n            <h3>Local-Only Processing</h3>\n            <p>Your code never leaves your machine. No network calls during scanning, no telemetry, no data collection. Your repositories remain private.</p>\n          </div>\n          \n          <div class=\"card\">\n            <h3>Deterministic Output</h3>\n            <p>Same input always produces identical output. File hashes verify integrity. Predictable behavior you can rely on in automated workflows.</p>\n          </div>\n          \n          <div class=\"card\">\n            <h3>Smart Filtering</h3>\n            <p>Uses customizable <a href=\"https://raw.githubusercontent.com/PaulTiffany/paleae/main/.paleaeignore\" download=\".paleaeignore\" target=\"_blank\" rel=\"noopener\" style=\"color: var(--accent); text-decoration: underline;\">.paleaeignore</a> with glob patterns and negation (!). CLI accepts regex patterns for power users. Skip build artifacts, keep what matters.</p>\n          </div>\n          \n          <div class=\"card\">\n            <h3>AI-Optimized Format</h3>\n            <p>Clean JSON/JSONL output with metadata, file hashes, and token estimates. Structured data that LLMs can parse and analyze effectively.</p>\n          </div>\n          \n          <div class=\"card\">\n            <h3>Sustainable Design</h3>\n            <p>No feature creep, no breaking changes. Tools should solve problems, not create them.</p>\n          </div>\n        </div>\n      </div>\n    </section>\n\n    <section class=\"philosophy\">\n      <div class=\"container\">\n        <div class=\"philosophy-content\">\n          <h2>The grain beneath the chaff</h2>\n          <p class=\"subtitle\">Paleae separates signal from noise in your codebase, like winnowing grain from chaff</p>\n          \n          <div class=\"philosophy-grid\">\n            <div class=\"principle\">\n              <h4>Constraints breed clarity</h4>\n              <p>Single file, zero dependencies. These aren't limitations—they're features that ensure simplicity and trustworthiness.</p>\n            </div>\n            \n            <div class=\"principle\">\n              <h4>Local-first always</h4>\n              <p>Your code contains your ideas and competitive advantages. It shouldn't require an internet connection to analyze.</p>\n            </div>\n            \n            <div class=\"principle\">\n              <h4>Predictable by design</h4>\n              <p>Surprises are bugs, not features. Deterministic output, clear error messages, consistent behavior.</p>\n            </div>\n            \n            <div class=\"principle\">\n              <h4>Lean but powerful</h4>\n              <p>Every feature must justify its existence. We resist bloat not from laziness, but from respect for the core mission.</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  </main>\n\n  <footer>\n    <div class=\"container\">\n      <div class=\"footer-content\">\n        <div class=\"footer-links\">\n          <a href=\"https://github.com/PaulTiffany/paleae\" target=\"_blank\" rel=\"noopener\">GitHub</a>\n          <a href=\"https://github.com/PaulTiffany/paleae/blob/main/PHILOSOPHY.md\" target=\"_blank\" rel=\"noopener\">Philosophy</a>\n          <a href=\"https://github.com/PaulTiffany/paleae/blob/main/CONTRIBUTING.md\" target=\"_blank\" rel=\"noopener\">Contributing</a>\n          <a href=\"https://github.com/PaulTiffany/paleae/blob/main/LICENSE\" target=\"_blank\" rel=\"noopener\">License</a>\n        </div>\n        <div class=\"copyright\">\n          © 2025 Paul Tiffany • MIT License • Paleae is local-first software\n        </div>\n      </div>\n    </div>\n  </footer>\n\n  <script>\n    // Theme toggle functionality\n    const themeToggle = document.getElementById('theme-toggle');\n    const root = document.documentElement;\n\n    // Initialize theme\n    const savedTheme = localStorage.getItem('theme') || \n                      (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');\n    root.setAttribute('data-theme', savedTheme);\n\n    themeToggle.addEventListener('click', () => {\n      const currentTheme = root.getAttribute('data-theme');\n      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';\n      root.setAttribute('data-theme', newTheme);\n      localStorage.setItem('theme', newTheme);\n    });\n\n    // Download functionality\n    const downloadBtn = document.getElementById('download-btn');\n    const downloadStatus = document.getElementById('download-status');\n\n    downloadBtn.addEventListener('click', async () => {\n      try {\n        downloadStatus.textContent = 'Downloading...';\n        downloadStatus.classList.add('show');\n        \n        const response = await fetch('https://raw.githubusercontent.com/PaulTiffany/paleae/main/paleae.py');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        \n        const content = await response.text();\n        const blob = new Blob([content], { type: 'text/x-python' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        \n        a.href = url;\n        a.download = 'paleae.py';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n        \n        downloadStatus.textContent = 'Downloaded!';\n        setTimeout(() => {\n          downloadStatus.classList.remove('show');\n        }, 2000);\n        \n      } catch (error) {\n        console.error('Download failed:', error);\n        downloadStatus.textContent = 'Download failed. Try the GitHub link.';\n        setTimeout(() => {\n          downloadStatus.classList.remove('show');\n        }, 3000);\n      }\n    });\n\n    // Copy command functionality\n    document.querySelectorAll('.copy-btn').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const target = e.target.getAttribute('data-copy-target');\n        const element = document.querySelector(target);\n        const text = element.value || element.textContent;\n        \n        navigator.clipboard.writeText(text).then(() => {\n          const originalText = btn.textContent;\n          btn.textContent = 'Copied!';\n          setTimeout(() => {\n            btn.textContent = originalText;\n          }, 1500);\n        }).catch(err => {\n          console.error('Failed to copy:', err);\n          btn.textContent = 'Failed to copy';\n          setTimeout(() => {\n            btn.textContent = 'Copy';\n          }, 1500);\n        });\n      });\n    });\n\n    // Smooth scrolling for anchor links\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n      anchor.addEventListener('click', function (e) {\n        e.preventDefault();\n        const target = document.querySelector(this.getAttribute('href'));\n        if (target) {\n          target.scrollIntoView({\n            behavior: 'smooth',\n            block: 'start'\n          });\n        }\n      });\n    });\n  </script>\n</body>\n</html>\n",
      "size_chars": 22784,
      "sha256": "6ad698a5ca57a30a95af27b50ea106259cf40b4f0301ead9cf9ee7f587afa78b",
      "estimated_tokens": 5696
    },
    {
      "path": "paleae.py",
      "content": "#!/usr/bin/env python3\n# SPDX-License-Identifier: MIT\n# Copyright (c) 2025 Paul Tiffany\n# Project: paleae - Snapshot your repo for LLMs\n# Website: https://paleae.com\n# Source:  https://github.com/PaulTiffany/paleae\n\n\"\"\"\npaleae - Create JSON/JSONL snapshots of your repository for LLMs.\n\nA single-file, zero-dependency tool that scans your codebase and creates\nstructured snapshots optimized for AI analysis and processing.\n\"\"\"\nimport argparse\nimport fnmatch\nimport hashlib\nimport json\nimport re\nimport sys\nimport time\nfrom pathlib import Path\nfrom typing import Any, Optional\n\n# Project metadata (also embedded in output)\n__version__ = \"1.2.0\" # Version bump for ignore negation feature\n__license__ = \"MIT\"\n__website__ = \"https://paleae.com\"\n__source__ = \"https://github.com/PaulTiffany/paleae\"\n\n# --- Configuration ---\nMAX_SIZE = 10 * 1024 * 1024  # 10MB\nPALEAEIGNORE = \".paleaeignore\"\n\nTEXT_EXTS = {\n    \".py\", \".md\", \".rst\", \".txt\", \".json\", \".yaml\", \".yml\", \".toml\", \".ini\",\n    \".cfg\", \".xml\", \".csv\", \".tsv\", \".html\", \".css\", \".js\", \".ts\", \".tsx\",\n    \".c\", \".h\", \".cpp\", \".hpp\", \".java\", \".kt\", \".go\", \".rs\", \".rb\", \".php\",\n    \".sh\", \".ps1\"\n}\n\nDEFAULT_SKIP = [\n    r\"(^|/)\\.(git|hg|svn)($|/)\",\n    r\"(^|/)__pycache__($|/)\",\n    r\"(^|/)\\.(pytest|mypy|ruff)_cache($|/)\",\n    r\"(^|/)(\\.?venv|env)($|/)\",\n    r\"(^|/)node_modules($|/)\",\n    r\"(^|/)(build|dist)($|/)\",\n    r\"(^|/)coverage($|/)\",\n    r\"(^|/)htmlcov($|/)\",\n    r\"(^|/)\\.coverage($|/)?\",\n    r\"(^|/)\\.env($|/)\",\n    r\"(^|/)\" + re.escape(PALEAEIGNORE) + r\"($|/)?\", # Ignore our own config file\n]\n\nPROFILES = {\n    \"minimal\": {\"include\": [r\".*\"], \"exclude\": DEFAULT_SKIP},\n    \"ai_optimized\": {\n        \"include\": [\n            r\"^(src|tests)(/.*)?$\",\n            r\"^pyproject\\.toml$\",\n            r\"^README(\\.md|\\.rst)?$\",\n            r\"^(ROADMAP|CHANGELOG)\\.md$\",\n        ],\n        \"exclude\": DEFAULT_SKIP + [r\"(^|/)docs/\"]\n    },\n}\n\n# --- Core Logic ---\n\nclass PaleaeError(Exception):\n    \"\"\"Base exception for paleae operations.\"\"\"\n\ndef token_estimate(text: str) -> int:\n    \"\"\"Estimate tokens using 4-char heuristic.\"\"\"\n    return max(1, len(text) // 4) if text else 0\n\ndef is_text_file(path: Path) -> bool:\n    \"\"\"Check if file should be treated as text.\"\"\"\n    if not path.is_file():\n        return False\n    try:\n        size = path.stat().st_size\n        if size == 0:\n            return path.suffix.lower() in TEXT_EXTS or path.suffix == \"\"\n        if size > MAX_SIZE:\n            return False\n        with path.open(\"rb\") as f:\n            chunk = f.read(min(1024, size))\n        if b\"\\x00\" in chunk:\n            return False\n        chunk.decode(\"utf-8\")\n        return True\n    except (OSError, UnicodeDecodeError, PermissionError):\n        return False\n\ndef _translate_globs_to_regex(globs: list[str]) -> list[str]:\n    \"\"\"Translate shell globs to regex strings with normalization.\"\"\"\n    regex_list: list[str] = []\n    for glob_pattern in globs:\n        line = glob_pattern.strip()\n        if not line or line.startswith(\"#\"):\n            continue\n        # fnmatch.translate handles **, *, ?, and char classes\n        regex_list.append(fnmatch.translate(line))\n    return regex_list\n\ndef read_paleaeignore(root: Path) -> tuple[list[str], list[str]]:\n    \"\"\"Return (positive_globs, negative_globs) from .paleaeignore.\"\"\"\n    pos: list[str] = []\n    neg: list[str] = []\n    path = root / PALEAEIGNORE\n    if not path.is_file():\n        return pos, neg\n    try:\n        lines = path.read_text(encoding=\"utf-8\", errors=\"ignore\").splitlines()\n        for line_item in lines:\n            line = line_item.strip()\n            if not line or line.startswith(\"#\"):\n                continue\n            if line.startswith(\"!\"):\n                neg.append(line[1:].strip())\n            else:\n                pos.append(line)\n    except (OSError, PermissionError):\n        print(f\"Warning: Could not read {PALEAEIGNORE}\", file=sys.stderr)\n    return pos, neg\n\ndef compile_patterns(patterns: Optional[list[str]]) -> list[re.Pattern[str]]:\n    \"\"\"Compile regex patterns with error handling.\"\"\"\n    if not patterns:\n        return []\n    compiled = []\n    for pattern in patterns:\n        try:\n            compiled.append(re.compile(pattern))\n        except re.error as e:\n            raise PaleaeError(f\"Invalid regex '{pattern}': {e}\") from e\n    return compiled\n\ndef matches_any(text: str, patterns: list[re.Pattern[str]]) -> bool:\n    \"\"\"Check if text matches any pattern.\"\"\"\n    return any(p.search(text) for p in patterns)\n\ndef collect_files(\n    root: Path,\n    inc_patterns: list[re.Pattern[str]],\n    exc_patterns: list[re.Pattern[str]],\n    ign_pos_patterns: list[re.Pattern[str]],\n    ign_neg_patterns: list[re.Pattern[str]]\n) -> list[str]:\n    \"\"\"Collect files matching all filter criteria.\"\"\"\n    if not root.is_dir():\n        raise PaleaeError(f\"Directory not found: {root}\")\n    \n    files = []\n    try:\n        for path in root.rglob(\"*\"):\n            if not path.is_file():\n                continue\n            try:\n                rel_path = path.relative_to(root).as_posix()\n            except ValueError:\n                continue\n\n            # Step 1: Check if the path is excluded by default, CLI, or .paleaeignore\n            is_excluded = (matches_any(rel_path, exc_patterns) or \n                           matches_any(rel_path, ign_pos_patterns))\n\n            # Step 2: A negative pattern (!) in .paleaeignore overrides any exclusion\n            if is_excluded and matches_any(rel_path, ign_neg_patterns):\n                is_excluded = False\n\n            if is_excluded:\n                continue\n\n            # Step 3: Check if the path meets the inclusion criteria\n            if inc_patterns and not matches_any(rel_path, inc_patterns):\n                continue\n\n            if is_text_file(path):\n                files.append(rel_path)\n    except (OSError, PermissionError) as e:\n        raise PaleaeError(f\"Error traversing {root}: {e}\") from e\n    return sorted(files)\n\ndef build_snapshot(root: Path, rel_files: list[str], ignore_meta: dict[str, Any]) -> dict[str, Any]:\n    \"\"\"Build complete snapshot data, including metadata.\"\"\"\n    files_data, total_chars, total_tokens = [], 0, 0\n    for rel_path in rel_files:\n        full_path = root / rel_path\n        try:\n            content = full_path.read_text(encoding=\"utf-8\", errors=\"ignore\")\n            if not content.strip():\n                continue\n        except (OSError, PermissionError, UnicodeDecodeError):\n            continue\n\n        chars = len(content)\n        tokens = token_estimate(content)\n        files_data.append({\n            \"path\": rel_path,\n            \"content\": content,\n            \"size_chars\": chars,\n            \"sha256\": hashlib.sha256(content.encode(\"utf-8\", errors=\"ignore\")).hexdigest(),\n            \"estimated_tokens\": tokens,\n        })\n        total_chars += chars\n        total_tokens += tokens\n        \n    return {\n        \"meta\": {\n            \"tool\": \"paleae\", \"version\": __version__, \"license\": __license__,\n            \"website\": __website__, \"source\": __source__,\n            \"timestamp\": time.strftime(\"%Y-%m-%dT%H:%M:%SZ\", time.gmtime()),\n            \"root_directory\": str(root),\n            \"ignore_file\": ignore_meta,\n            \"summary\": {\n                \"total_files\": len(files_data),\n                \"total_chars\": total_chars,\n                \"estimated_tokens\": total_tokens\n            }\n        },\n        \"files\": files_data\n    }\n\ndef write_output(path: Path, data: dict[str, Any], format: str) -> None:\n    \"\"\"Write data as JSON or JSONL file.\"\"\"\n    try:\n        path.parent.mkdir(parents=True, exist_ok=True)\n        if format == \"json\":\n            content = json.dumps(data, indent=2, ensure_ascii=False)\n            path.write_text(content, encoding=\"utf-8\")\n        else: # jsonl\n            with path.open(\"w\", encoding=\"utf-8\") as f:\n                f.write(json.dumps({\"type\": \"meta\", **data[\"meta\"]}, ensure_ascii=False) + \"\\n\")\n                for row in data[\"files\"]:\n                    f.write(json.dumps({\"type\": \"file\", **row}, ensure_ascii=False) + \"\\n\")\n    except (OSError, PermissionError) as e:\n        raise PaleaeError(f\"Error writing {path}: {e}\") from e\n\n# --- CLI and Main Execution ---\n\ndef create_parser() -> argparse.ArgumentParser:\n    \"\"\"Create CLI argument parser.\"\"\"\n    parser = argparse.ArgumentParser(\n        description=\"Create JSON/JSONL snapshot of your repo for LLMs\"\n    )\n    parser.add_argument(\n        \"directory\", nargs=\"?\", default=\".\", help=\"Directory to snapshot (default: .)\"\n    )\n    parser.add_argument(\n        \"-o\", \"--out\", help=\"Output file (auto-named if not specified)\"\n    )\n    parser.add_argument(\n        \"-f\", \"--format\", choices=[\"json\", \"jsonl\"], default=\"json\", help=\"Output format\"\n    )\n    parser.add_argument(\n        \"--profile\", choices=list(PROFILES.keys()), default=\"minimal\",\n        help=\"File inclusion profile\"\n    )\n    parser.add_argument(\n        \"--include\", action=\"append\", help=\"Extra include regex (repeatable)\"\n    )\n    parser.add_argument(\n        \"--exclude\", action=\"append\", help=\"Extra exclude regex (repeatable)\"\n    )\n    parser.add_argument(\"--version\", action=\"version\", version=f\"paleae {__version__}\")\n    parser.add_argument(\"--about\", action=\"store_true\", help=\"Show project info and exit\")\n    return parser\n\ndef main() -> int: # noqa: PLR0911\n    \"\"\"Run the main entry point.\"\"\"\n    parser = create_parser()\n    args = parser.parse_args()\n\n    if args.about:\n        print(\n            f\"paleae {__version__} ({__license__})\\n\"\n            f\"Website: {__website__}\\n\"\n            f\"Source:  {__source__}\"\n        )\n        return 0\n\n    try:\n        # --- Setup ---\n        root = Path(args.directory).resolve()\n        if not root.is_dir():\n            print(f\"Error: '{args.directory}' is not a directory\", file=sys.stderr)\n            return 1\n\n        # --- Pattern Compilation ---\n        profile = PROFILES.get(args.profile, PROFILES[\"minimal\"])\n        inc_cli = compile_patterns((args.include or []) + profile[\"include\"])\n        exc_cli = compile_patterns((args.exclude or []) + profile[\"exclude\"])\n\n        pos_globs, neg_globs = read_paleaeignore(root)\n        ign_pos_rx = compile_patterns(_translate_globs_to_regex(pos_globs))\n        ign_neg_rx = compile_patterns(_translate_globs_to_regex(neg_globs))\n        ignore_meta = {\n            \"file\": PALEAEIGNORE,\n            \"present\": bool(pos_globs or neg_globs),\n            \"patterns\": len(pos_globs),\n            \"negations\": len(neg_globs),\n        }\n\n        # --- File Collection ---\n        files = collect_files(root, inc_cli, exc_cli, ign_pos_rx, ign_neg_rx)\n        if not files:\n            print(\"No text files found matching criteria.\", file=sys.stderr)\n            return 1\n\n        # --- Snapshot Generation & Output ---\n        data = build_snapshot(root, files, ignore_meta)\n        out_path = Path(args.out) if args.out else Path(f\"repo_snapshot.{args.format}\")\n        write_output(out_path, data, args.format)\n\n        # --- Summary ---\n        s = data[\"meta\"][\"summary\"]\n        print(f\"✓ Snapshot saved to {out_path}\")\n        print(\n            f\"  Files: {s['total_files']}  \"\n            f\"Characters: {s['total_chars']:,}  \"\n            f\"Tokens: {s['estimated_tokens']:,}\"\n        )\n        return 0\n\n    except PaleaeError as e:\n        print(f\"Error: {e}\", file=sys.stderr)\n        return 1\n    except KeyboardInterrupt:\n        print(\"\\nCancelled by user\", file=sys.stderr)\n        return 1\n    except Exception as e:\n        print(f\"Unexpected error: {e}\", file=sys.stderr)\n        return 1\n\ndef cli_entrypoint() -> None:\n    \"\"\"Console entry point (kept tiny so tests can patch sys.exit).\"\"\"\n    sys.exit(main())\n\nif __name__ == \"__main__\":\n    cli_entrypoint()\n",
      "size_chars": 11773,
      "sha256": "b1dea0471bc5030b6abc21ba342c0c4f5297b6b3c838f126b59dfc4811a1add0",
      "estimated_tokens": 2943
    },
    {
      "path": "pyproject.toml",
      "content": "[build-system]\nrequires = [\"setuptools>=69\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project]\nname = \"paleae\"\nversion = \"1.2.0\"\ndescription = \"Lightweight snapshot tool for codebases.\"\nreadme = \"README.md\"\nrequires-python = \">=3.9\"\nlicense = { text = \"MIT\" }\nauthors = [{ name = \"Paul Tiffany\" }]\n\n[project.scripts]\npaleae = \"paleae.paleae:main\"\n\n[project.optional-dependencies]\ndev = [\n    \"cosmic-ray\",\n    \"pydocstyle\",\n    \"pytest\",\n    \"mypy\",\n    \"ruff\",\n    \"hypothesis\"\n]\n",
      "size_chars": 491,
      "sha256": "12bca2062cba732e9359b56d3477c7c205df1f770d74e555818e58cef0bdb154",
      "estimated_tokens": 122
    },
    {
      "path": "tests/conftest.py",
      "content": "from hypothesis import HealthCheck, settings\n\nsettings.register_profile(\n    \"ci\",\n    max_examples=200,\n    deadline=200,\n    suppress_health_check=[HealthCheck.too_slow],\n    derandomize=False,\n    print_blob=True,\n    \n)\nsettings.load_profile(\"ci\")\n",
      "size_chars": 252,
      "sha256": "0b463d7ede9e004d44daa1aad0d348225050e52b4ee8790e578d7ed59ff92ea5",
      "estimated_tokens": 63
    },
    {
      "path": "tests/test_paleae.py",
      "content": "# SPDX-License-Identifier: MIT\n# Copyright (c) 2025 Paul Tiffany\n# Project: paleae - Snapshot your repo for LLMs\n\nimport argparse\nimport fnmatch\nimport json\nimport re\nimport runpy\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom unittest.mock import patch\n\nimport pytest\nfrom hypothesis import given, strategies as st, settings, HealthCheck\n\nimport importlib.util\n\n\ndef load_paleae_module():\n    \"\"\"Load the paleae.py script as a module.\"\"\"\n    script_path = Path(__file__).parent.parent / \"paleae.py\"\n    spec = importlib.util.spec_from_file_location(\"paleae\", script_path)\n    if not (spec and spec.loader):\n        raise ImportError(f\"Could not load spec for module paleae from {script_path}\")\n    paleae = importlib.util.module_from_spec(spec)\n    spec.loader.exec_module(paleae)\n    sys.modules[\"paleae\"] = paleae\n    return paleae\n\npaleae = load_paleae_module()\n\n\n# --- Fixtures ---\n\n@pytest.fixture\ndef temp_repo(tmp_path: Path):\n    \"\"\"Create a temporary directory structure for testing.\"\"\"\n    repo = tmp_path / \"repo\"\n    repo.mkdir()\n    (repo / \"src\").mkdir()\n    (repo / \"tests\").mkdir()\n    (repo / \".git\").mkdir()\n    (repo / \"venv\").mkdir()\n    (repo / \"__pycache__\").mkdir()\n    (repo / \".paleaeignore\").write_text(\n        \"\"\"# Ignore logs\n*.log\n\n!important.log\ndist/\n\"\"\"\n    )\n    (repo / \"src\" / \"main.py\").write_text(\"print('hello')\")\n    (repo / \"src\" / \"utils.py\").write_text(\"def helper(): pass\")\n    (repo / \"README.md\").write_text(\"# My Project\")\n    (repo / \"data.bin\").write_bytes(b\"\\x00\\x01\\x02\")\n    (repo / \"empty.txt\").touch()\n    (repo / \"app.log\").write_text(\"Log entry\")\n    (repo / \"important.log\").write_text(\"Important log\")\n    (repo / \"dist\").mkdir()\n    (repo / \"dist\" / \"package.tar.gz\").touch()\n    (repo / \"tests\" / \"test_main.py\").write_text(\"assert True\")\n\n    # Create a file with unicode errors\n    (repo / \"bad_encoding.txt\").write_bytes(b\"\\xff\\xfe\")\n\n    # Create a file that is too large\n    large_file = repo / \"large_file.txt\"\n    with large_file.open(\"wb\") as f:\n        f.seek(paleae.MAX_SIZE + 1)\n        f.write(b\"\\0\")\n\n    return repo\n\n\n# --- Unit Tests for Core Logic ---\n\ndef test_importer_failure():\n    \"\"\"Test the script importer fails gracefully.\"\"\"\n    with patch(\"importlib.util.spec_from_file_location\", return_value=None):\n        with pytest.raises(ImportError):\n            load_paleae_module()\n\ndef test_token_estimate():\n    assert paleae.token_estimate(\"\") == 0\n    assert paleae.token_estimate(\"a\") == 1\n    assert paleae.token_estimate(\"abc\") == 1\n    assert paleae.token_estimate(\"abcd\") == 1\n    assert paleae.token_estimate(\"abcde\") == 1\n    long_text = \"long text for estimation\"\n    assert paleae.token_estimate(long_text) == len(long_text) // 4\n    assert paleae.token_estimate(None) == 0\n\n@given(st.text())\ndef test_token_estimate_hypothesis(s):\n    \"\"\"Property-based test for token_estimate.\"\"\"\n    estimate = paleae.token_estimate(s)\n    assert isinstance(estimate, int)\n    assert estimate >= 0\n    if s:\n        assert estimate > 0\n        assert estimate >= len(s) // 4\n    else:\n        assert estimate == 0\n\ndef test_is_text_file(temp_repo):\n    assert paleae.is_text_file(temp_repo / \"src\" / \"main.py\") is True\n    assert paleae.is_text_file(temp_repo / \"README.md\") is True\n    assert paleae.is_text_file(temp_repo / \"data.bin\") is False\n    assert paleae.is_text_file(temp_repo / \"empty.txt\") is True\n    (temp_repo / \"empty_no_ext\").touch()\n    assert paleae.is_text_file(temp_repo / \"empty_no_ext\") is True\n    assert paleae.is_text_file(temp_repo / \"non_existent_file.txt\") is False\n    assert paleae.is_text_file(temp_repo / \"bad_encoding.txt\") is False\n    assert paleae.is_text_file(temp_repo / \"large_file.txt\") is False\n    # Test a file with a non-text extension but text content\n    (temp_repo / \"custom.ext\").write_text(\"text content\")\n    assert paleae.is_text_file(temp_repo / \"custom.ext\") is True\n    # Test directory\n    assert paleae.is_text_file(temp_repo / \"src\") is False\n    # Test permission error on read\n    with patch.object(Path, \"open\", side_effect=PermissionError):\n        assert paleae.is_text_file(temp_repo / \"src\" / \"main.py\") is False\n\n# Strategy for content that is likely not UTF-8\ninvalid_utf8_content = st.text(min_size=1).map(lambda s: s.encode('utf-16'))\n\n@settings(suppress_health_check=[HealthCheck.function_scoped_fixture])\n@given(content=invalid_utf8_content)\ndef test_is_text_file_invalid_utf8_hypothesis(tmp_path, content):\n    # Ensure we don't have null bytes, to isolate the unicode error\n    content = content.replace(b'\\x00', b'')\n    if not content:\n        return  # Skip if the content becomes empty after removing nulls\n\n    path = tmp_path / \"invalid_utf8.txt\"\n    path.write_bytes(content)\n\n    # is_text_file should return False because of UnicodeDecodeError\n    assert not paleae.is_text_file(path)\n\n\ndef test_translate_globs_to_regex():\n    globs = [\"*.py\", \"src/\", \"# comment\", \"\", \"data[0-9].bin\"]\n    expected = [\n        fnmatch.translate(\"*.py\"),\n        fnmatch.translate(\"src/\"),\n        fnmatch.translate(\"data[0-9].bin\"),\n    ]\n    assert paleae._translate_globs_to_regex(globs) == expected\n\n# Characters that have special meaning in globs but not always in regex\nst_glob_chars = st.sampled_from(\"*?[]!\")\n\n# Strategy for generating a simple glob pattern component\nst_glob_part = st.text(\n    st.characters(\n        max_codepoint=127, blacklist_characters=\"*?[]!/\\\\\"\n    ),\n    min_size=1,\n)\n\n\n\n# Strategy for generating a full glob pattern\nst_glob_pattern = st.lists(\n    st.one_of(st_glob_part, st_glob_chars), min_size=1, max_size=10\n).map(\"\".join)\n\n\n@given(pattern=st_glob_pattern, text=st.text(max_size=100))\ndef test_translate_globs_to_regex_hypothesis(pattern, text):\n    \"\"\"Check that translated glob regex behaves like fnmatch.\"\"\"\n    # The core invariant: if fnmatch.fnmatch matches, so should the regex.\n    # Note: The reverse is not always true due to how fnmatch translates '**' etc.\n    # We are testing for basic consistency.\n    try:\n        regex_str = fnmatch.translate(pattern)\n        compiled_regex = re.compile(regex_str)\n        \n        matches_glob = fnmatch.fnmatch(text, pattern)\n        matches_regex = compiled_regex.match(text) is not None\n\n        if matches_glob:\n            assert matches_regex, f\"Glob '{pattern}' matched '{text}', but regex '{regex_str}' did not.\"\n\n    except re.error:\n        # Some generated patterns might be invalid for fnmatch, which is fine.\n        # We are interested in the behavior of valid patterns.\n        pass\n\n\ndef test_read_paleaeignore(temp_repo):\n    pos, neg = paleae.read_paleaeignore(temp_repo)\n    assert pos == [\"*.log\", \"dist/\"]\n    assert neg == [\"important.log\"]\n\ndef test_read_paleaeignore_not_found(tmp_path):\n    pos, neg = paleae.read_paleaeignore(tmp_path)\n    assert pos == []\n    assert neg == []\n\ndef test_read_paleaeignore_permission_error(temp_repo, capsys):\n    with patch.object(Path, \"read_text\", side_effect=PermissionError(\"Permission denied\")):\n        pos, neg = paleae.read_paleaeignore(temp_repo)\n        assert pos == []\n        assert neg == []\n        captured = capsys.readouterr()\n        assert f\"Warning: Could not read {paleae.PALEAEIGNORE}\" in captured.err\n\n@settings(suppress_health_check=[HealthCheck.function_scoped_fixture])\n@given(\n    lines=st.lists(\n        st.one_of(\n            st.just(\"\"),  # Empty lines\n            st.just(\"# comment\"),  # Comments\n            st.just(\"!negated\"),  # Negated pattern\n            st.just(\"  ! spaced_negated  \"),  # Spaced negated\n            st.just(\"positive\"),  # Positive pattern\n            st.just(\"  spaced_positive  \"),  # Spaced positive\n        )\n    )\n)\ndef test_read_paleaeignore_hypothesis(tmp_path, lines):\n    \"\"\"Test parsing of .paleaeignore with varied content.\"\"\"\n    content = \"\\n\".join(lines)\n    ignore_file = tmp_path / paleae.PALEAEIGNORE\n    ignore_file.write_text(content)\n\n    pos, neg = paleae.read_paleaeignore(tmp_path)\n\n    expected_pos = []\n    expected_neg = []\n    for line in lines:\n        stripped = line.strip()\n        if not stripped or stripped.startswith(\"#\"):\n            continue\n        if stripped.startswith(\"!\"):\n            expected_neg.append(stripped[1:].strip())\n        else:\n            expected_pos.append(stripped)\n    \n    assert sorted(pos) == sorted(expected_pos)\n    assert sorted(neg) == sorted(expected_neg)\n\n\ndef test_compile_patterns():\n    patterns = [\"^src/\", r\"\\.py$\"]\n    compiled = paleae.compile_patterns(patterns)\n    assert len(compiled) == len(patterns)\n    assert compiled[0].pattern == \"^src/\"\n    assert compiled[1].pattern == r\"\\.py$\"\n    assert paleae.compile_patterns(None) == []\n\ndef test_compile_patterns_invalid_regex():\n    with pytest.raises(paleae.PaleaeError, match=\"unterminated character set\"):\n        paleae.compile_patterns([\"[\"])\n\ndef test_matches_any():\n    patterns = [re.compile(r\"^src/\"), re.compile(r\"\\.md$\")]\n    assert paleae.matches_any(\"src/main.py\", patterns) is True\n    assert paleae.matches_any(\"README.md\", patterns) is True\n    assert paleae.matches_any(\"tests/test.py\", patterns) is False\n\n@given(\n    text=st.text(max_size=100),\n    patterns_str=st.lists(st.sampled_from([r\"^a\", r\"b$\", r\"c\\d\"]), min_size=0, max_size=5)\n)\ndef test_matches_any_hypothesis(text, patterns_str):\n    \"\"\"Test matches_any logic against a manual check.\"\"\"\n    patterns = [re.compile(p) for p in patterns_str]\n    \n    result = paleae.matches_any(text, patterns)\n    \n    manual_check = any(re.search(p, text) for p in patterns_str)\n    \n    assert result == manual_check\n\n\n\n# --- Integration-like Tests for File Collection ---\n\ndef test_collect_files_default_skip(temp_repo):\n    all_files = [\n        p.relative_to(temp_repo).as_posix() for p in temp_repo.rglob(\"*\") if p.is_file()\n    ]\n    exc_patterns = paleae.compile_patterns(paleae.DEFAULT_SKIP)\n    expected = [\n        f\n        for f in all_files\n        if not paleae.matches_any(f, exc_patterns)\n        and paleae.is_text_file(temp_repo / f)\n    ]\n    files = paleae.collect_files(temp_repo, [], exc_patterns, [], [])\n    assert sorted(files) == sorted(expected)\n\ndef test_collect_files_with_paleaeignore(temp_repo):\n    pos_globs, neg_globs = paleae.read_paleaeignore(temp_repo)\n    ign_pos_rx = paleae.compile_patterns(paleae._translate_globs_to_regex(pos_globs))\n    ign_neg_rx = paleae.compile_patterns(paleae._translate_globs_to_regex(neg_globs))\n    files = paleae.collect_files(\n        temp_repo,\n        [],\n        paleae.compile_patterns(paleae.DEFAULT_SKIP),\n        ign_pos_rx,\n        ign_neg_rx,\n    )\n    assert \"app.log\" not in files\n    assert not any(f.startswith(\"dist/\") for f in files)\n    assert \"important.log\" in files\n    assert \"src/main.py\" in files\n\ndef test_collect_files_with_cli_include_exclude(temp_repo):\n    inc = paleae.compile_patterns([r\"^src/\"])\n    exc = paleae.compile_patterns([r\"\\.py$\"])\n    files = paleae.collect_files(temp_repo, inc, exc, [], [])\n    assert files == []\n    inc = paleae.compile_patterns([r\"^src/\"])\n    exc = paleae.compile_patterns([r\"utils\"])\n    files = paleae.collect_files(temp_repo, inc, exc, [], [])\n    assert files == [\"src/main.py\"]\n\ndef test_collect_files_non_existent_dir():\n    with pytest.raises(paleae.PaleaeError, match=\"Directory not found\"):\n        paleae.collect_files(Path(\"nonexistent\"), [], [], [], [])\n\ndef test_collect_files_permission_error(temp_repo):\n    with patch.object(Path, \"rglob\", side_effect=PermissionError(\"Access denied\")):\n        with pytest.raises(paleae.PaleaeError, match=\"Error traversing\"):\n            paleae.collect_files(temp_repo, [], [], [], [])\n\ndef test_collect_files_value_error_on_relative_to(temp_repo):\n    with patch.object(Path, \"relative_to\", side_effect=ValueError):\n        files = paleae.collect_files(temp_repo, [], [], [], [])\n        assert files is not None\n\n\n# --- Tests for Snapshot Building and Writing ---\n\ndef test_build_snapshot(temp_repo):\n    files = [\"src/main.py\", \"README.md\", \"non_existent.txt\"]\n    ignore_meta = {\"file\": \".paleaeignore\", \"present\": True, \"patterns\": 2, \"negations\": 1}\n    with patch(\"time.strftime\", return_value=\"2025-09-14T12:00:00Z\"):\n        data = paleae.build_snapshot(temp_repo, files, ignore_meta)\n\n    assert data[\"meta\"][\"tool\"] == \"paleae\"\n    assert data[\"meta\"][\"version\"] == paleae.__version__\n    assert data[\"meta\"][\"timestamp\"] == \"2025-09-14T12:00:00Z\"\n    assert data[\"meta\"][\"root_directory\"] == str(temp_repo)\n    assert data[\"meta\"][\"ignore_file\"] == ignore_meta\n\n    expected_file_count = 2\n    assert len(data[\"files\"]) == expected_file_count\n\n    main_py_data = next(f for f in data[\"files\"] if f[\"path\"] == \"src/main.py\")\n    readme_data = next(f for f in data[\"files\"] if f[\"path\"] == \"README.md\")\n    content = \"print('hello')\"\n    assert main_py_data[\"content\"] == content\n    assert main_py_data[\"size_chars\"] == len(content)\n    assert main_py_data[\"estimated_tokens\"] > 0\n    assert readme_data[\"content\"] == \"# My Project\"\n\n    summary = data[\"meta\"][\"summary\"]\n    assert summary[\"total_files\"] == expected_file_count\n    \n    expected_total_chars = main_py_data[\"size_chars\"] + readme_data[\"size_chars\"]\n    assert summary[\"total_chars\"] == expected_total_chars\n\n    expected_total_tokens = main_py_data[\"estimated_tokens\"] + readme_data[\"estimated_tokens\"]\n    assert summary[\"estimated_tokens\"] == expected_total_tokens\n\ndef test_build_snapshot_skips_empty_files(temp_repo):\n    (temp_repo / \"truly_empty.txt\").touch()\n    (temp_repo / \"whitespace.txt\").write_text(\"   \\n\\t   \")\n    files = [\"truly_empty.txt\", \"whitespace.txt\"]\n    data = paleae.build_snapshot(temp_repo, files, {})\n    assert len(data[\"files\"]) == 0\n\ndef test_build_snapshot_read_error(temp_repo):\n    with patch.object(Path, \"read_text\", side_effect=OSError(\"Read error\")):\n        data = paleae.build_snapshot(temp_repo, [\"src/main.py\"], {})\n        assert len(data[\"files\"]) == 0\n\n@settings(suppress_health_check=[HealthCheck.function_scoped_fixture])\n@given(\n    file_contents=st.dictionaries(\n        keys=st.text(st.characters(min_codepoint=97, max_codepoint=122), min_size=1, max_size=10).map(lambda s: f\"{s}.txt\"),\n        values=st.text(min_size=1, max_size=1000), # Ensure content is not empty\n        min_size=1,\n        max_size=10\n    )\n)\ndef test_build_snapshot_summary_invariant(tmp_path, file_contents):\n    \"\"\"The summary metadata must accurately reflect the file data.\"\"\"\n    # Create the files in a temp directory\n    for rel_path, content in file_contents.items():\n        file_path = tmp_path / rel_path\n        file_path.parent.mkdir(parents=True, exist_ok=True)\n        file_path.write_text(content, encoding=\"utf-8\")\n\n    rel_files = sorted(list(file_contents.keys()))\n    \n    # Build the snapshot\n    snapshot = paleae.build_snapshot(tmp_path, rel_files, {})\n    \n    # Verify the invariant\n    summary = snapshot[\"meta\"][\"summary\"]\n    files_data = snapshot[\"files\"]\n    \n    assert summary[\"total_files\"] == len(files_data)\n    \n    # We need to recalculate totals from the *actual* files included,\n    # as some might have been skipped (e.g., if they became empty after stripping)\n    included_paths = {f[\"path\"] for f in files_data}\n    \n    expected_chars = sum(len(file_contents[p]) for p in included_paths)\n    expected_tokens = sum(paleae.token_estimate(file_contents[p]) for p in included_paths)\n    \n    assert summary[\"total_chars\"] == expected_chars\n    assert summary[\"estimated_tokens\"] == expected_tokens\n\n\ndef test_write_output_json(tmp_path):\n    out_path = tmp_path / \"snapshot.json\"\n    data = {\"meta\": {\"tool\": \"paleae\"}, \"files\": [{\"path\": \"a.py\"}]}\n    paleae.write_output(out_path, data, \"json\")\n    content = json.loads(out_path.read_text())\n    assert content[\"meta\"][\"tool\"] == \"paleae\"\n    assert content[\"files\"][0][\"path\"] == \"a.py\"\n\ndef test_write_output_jsonl(tmp_path):\n    out_path = tmp_path / \"snapshot.jsonl\"\n    file_data = [\n        {\"path\": \"a.py\", \"content\": \"a\"},\n        {\"path\": \"b.py\", \"content\": \"b\"},\n    ]\n    data = {\n        \"meta\": {\"tool\": \"paleae\", \"version\": \"1.2.0\"},\n        \"files\": file_data\n    }\n    paleae.write_output(out_path, data, \"jsonl\")\n    lines = out_path.read_text().strip().split(\"\\n\")\n    \n    expected_line_count = 1 + len(file_data)  # 1 meta line + file lines\n    assert len(lines) == expected_line_count\n\n    meta = json.loads(lines[0])\n    file1 = json.loads(lines[1])\n    file2 = json.loads(lines[2])\n    assert meta[\"type\"] == \"meta\"\n    assert meta[\"tool\"] == \"paleae\"\n    assert file1[\"type\"] == \"file\"\n    assert file1[\"path\"] == \"a.py\"\n    assert file2[\"path\"] == \"b.py\"\n\ndef test_write_output_permission_error(tmp_path):\n    out_path = tmp_path / \"snapshot.json\"\n    with patch.object(Path, \"write_text\", side_effect=PermissionError(\"Access denied\")):\n        with pytest.raises(paleae.PaleaeError, match=\"Error writing\"):\n            paleae.write_output(out_path, {\"meta\": {}, \"files\": []}, \"json\")\n\n\n# --- Tests for CLI and Main Execution ---\n\n@patch(\"paleae.write_output\")\n@patch(\"paleae.build_snapshot\")\n@patch(\"paleae.collect_files\")\ndef test_main_success(mock_collect, mock_build, mock_write, temp_repo, capsys):\n    mock_collect.return_value = [\"src/main.py\"]\n    mock_build.return_value = {\n        \"meta\": {\n            \"summary\": {\n                \"total_files\": 1,\n                \"total_chars\": 100,\n                \"estimated_tokens\": 25,\n            }\n        },\n        \"files\": [{\"path\": \"src/main.py\"}],\n    }\n    with patch(\"sys.argv\", [\"paleae\", str(temp_repo)]):\n        assert paleae.main() == 0\n    mock_collect.assert_called_once()\n    mock_build.assert_called_once()\n    mock_write.assert_called_once()\n    captured = capsys.readouterr()\n    assert \"Snapshot saved to\" in captured.out\n    assert \"Files: 1\" in captured.out\n    assert \"Characters: 100\" in captured.out\n    assert \"Tokens: 25\" in captured.out\n\ndef test_main_about(capsys):\n    with patch(\"sys.argv\", [\"paleae\", \"--about\"]):\n        assert paleae.main() == 0\n    captured = capsys.readouterr()\n    assert f\"paleae {paleae.__version__}\" in captured.out\n    assert paleae.__website__ in captured.out\n    assert paleae.__source__ in captured.out\n\ndef test_main_invalid_directory(capsys):\n    with patch(\"sys.argv\", [\"paleae\", \"non_existent_dir\"]):\n        assert paleae.main() == 1\n    captured = capsys.readouterr()\n    assert \"is not a directory\" in captured.err\n\ndef test_main_no_files_found(temp_repo, capsys):\n    with patch(\"paleae.collect_files\", return_value=[]) :\n        with patch(\"sys.argv\", [\"paleae\", str(temp_repo)]):\n            assert paleae.main() == 1\n    captured = capsys.readouterr()\n    assert \"No text files found\" in captured.err\n\ndef test_main_paleae_error(capsys):\n    with patch(\n        \"paleae.collect_files\", side_effect=paleae.PaleaeError(\"Test error\")\n    ):\n        with patch(\"sys.argv\", [\"paleae\", \".\"]):\n            assert paleae.main() == 1\n    captured = capsys.readouterr()\n    assert \"Error: Test error\" in captured.err\n\ndef test_main_keyboard_interrupt(capsys):\n    with patch(\"paleae.collect_files\", side_effect=KeyboardInterrupt):\n        with patch(\"sys.argv\", [\"paleae\", \".\"]):\n            assert paleae.main() == 1\n    captured = capsys.readouterr()\n    assert \"Cancelled by user\" in captured.err\n\ndef test_main_unexpected_exception(capsys):\n    with patch(\"paleae.collect_files\", side_effect=ValueError(\"Unexpected\")):\n        with patch(\"sys.argv\", [\"paleae\", \".\"]):\n            assert paleae.main() == 1\n    captured = capsys.readouterr()\n    assert \"Unexpected error: Unexpected\" in captured.err\n\ndef test_create_parser():\n    parser = paleae.create_parser()\n    assert isinstance(parser, argparse.ArgumentParser)\n    actions = {action.dest: action for action in parser._actions}\n    assert \"directory\" in actions\n    assert \"out\" in actions\n    assert \"format\" in actions\n    assert \"version\" in actions\n    assert \"about\" in actions\n\ndef test_main_with_output_file(temp_repo, capsys):\n    output_file = temp_repo / \"output.json\"\n    with patch(\"sys.argv\", [\"paleae\", str(temp_repo), \"-o\", str(output_file)]):\n        with patch(\"paleae.collect_files\", return_value=[\"README.md\"]):\n            with patch(\n                \"paleae.build_snapshot\",\n                return_value={\n                    \"meta\": {\n                        \"summary\": {\n                            \"total_files\": 1,\n                            \"total_chars\": 12,\n                            \"estimated_tokens\": 3,\n                        }\n                    },\n                    \"files\": [{\"path\": \"README.md\"}],\n                },\n            ):\n                paleae.main()\n    assert output_file.exists()\n    captured = capsys.readouterr()\n    assert f\"Snapshot saved to {output_file}\" in captured.out\n\ndef test_main_profile_and_extra_patterns(temp_repo):\n    with patch(\n        \"sys.argv\",\n        [\n            \"paleae\",\n            str(temp_repo),\n            \"--profile\",\n            \"ai_optimized\",\n            \"--include\",\n            r\"\\.md$\",\n            \"--exclude\",\n            \"src\",\n        ],\n    ):\n        with patch(\"paleae.collect_files\", return_value=[]) as mock_collect:\n            paleae.main()\n            args, kwargs = mock_collect.call_args\n            inc_patterns = args[1]\n            exc_patterns = args[2]\n            assert (\n                len(inc_patterns)\n                == len(paleae.PROFILES[\"ai_optimized\"][\"include\"]) + 1\n            )\n            assert (\n                len(exc_patterns)\n                == len(paleae.PROFILES[\"ai_optimized\"][\"exclude\"]) + 1\n            )\n            assert any(p.pattern == r\"\\.md$\" for p in inc_patterns)\n            assert any(p.pattern == \"src\" for p in exc_patterns)\n\ndef test_main_entrypoint():\n    \"\"\"Test running the script directly.\"\"\"\n    script_path = Path(__file__).parent.parent / \"paleae.py\"\n    result = subprocess.run(\n        [sys.executable, str(script_path), \"--about\"],\n        check=False,\n        capture_output=True,\n        text=True,\n    )\n    assert result.returncode == 0\n    assert paleae.__version__ in result.stdout\n    assert paleae.__website__ in result.stdout\n\n\n# This is a placeholder to allow running the file directly\nif __name__ == \"__main__\":\n    pytest.main()\n\ndef test_main_runpy_about(capsys):\n    \"\"\"Execute paleae.py as __main__ in-process so coverage hits the guard line.\"\"\"\n    script_path = Path(__file__).parent.parent / \"paleae.py\"\n    with patch(\"sys.argv\", [\"paleae.py\", \"--about\"]):\n        with patch(\"sys.exit\") as mock_exit:\n            runpy.run_path(str(script_path), run_name=\"__main__\")\n            mock_exit.assert_called_once_with(0)\n    out = capsys.readouterr().out\n    # Sanity: --about should print version + website\n    assert \"paleae\" in out and paleae.__version__ in out and paleae.__website__ in out\n\ndef test_testfile_main_entry():\n    \"\"\"Cover the __main__ block in the test file itself.\"\"\"\n    with patch(\"pytest.main\", return_value=0) as mock_pytest_main:\n        runpy.run_path(str(Path(__file__)), run_name=\"__main__\")\n        mock_pytest_main.assert_called_once()",
      "size_chars": 23086,
      "sha256": "ff33ada77ebda08afe187d10a3eecacdf1a90390981113ec4baa10c983e84443",
      "estimated_tokens": 5771
    }
  ]
}